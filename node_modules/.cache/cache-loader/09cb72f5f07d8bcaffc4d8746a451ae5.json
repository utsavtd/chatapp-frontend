{"remainingRequest":"/Library/WebServer/Documents/chat-app/node_modules/babel-loader/lib/index.js!/Library/WebServer/Documents/chat-app/node_modules/eslint-loader/index.js??ref--18-0!/Library/WebServer/Documents/chat-app/src/store.js","dependencies":[{"path":"/Library/WebServer/Documents/chat-app/src/store.js","mtime":1555681655000},{"path":"/Library/WebServer/Documents/chat-app/package.json","mtime":1555681580000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/cache-loader/dist/cjs.js","mtime":1525787659000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport createPersistedState from \"vuex-persistedstate\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    user: {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      token: \"\"\n    },\n    loading: false\n  },\n  plugins: [createPersistedState()],\n  mutations: {\n    user: function user(state, data) {\n      state.user = data;\n    },\n    emptyUser: function emptyUser(state) {\n      state.user = {\n        first_name: \"\",\n        last_name: \"\",\n        email: \"\",\n        token: \"\"\n      };\n    },\n    loading: function loading(state, data) {\n      state.loading = data;\n    }\n  },\n  actions: {\n    setUser: function setUser(_ref, data) {\n      var commit = _ref.commit;\n      commit(\"user\", data);\n    },\n    setEmptyUser: function setEmptyUser(_ref2) {\n      var commit = _ref2.commit;\n      commit(\"emptyUser\");\n    },\n    setLoading: function setLoading(_ref3, data) {\n      var commit = _ref3.commit;\n      commit(\"loading\", data);\n    }\n  },\n  getters: {\n    user: function user(state) {\n      return state.user;\n    },\n    loading: function loading(state) {\n      return state.loading;\n    }\n  }\n});",{"version":3,"sources":["src/store.js"],"names":["Vue","Vuex","createPersistedState","use","Store","state","user","first_name","last_name","email","token","loading","plugins","mutations","data","emptyUser","actions","setUser","commit","setEmptyUser","setLoading","getters"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,qBAAjC;AAEAF,IAAIG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,KAAKG,KAAT,CAAe;AAC1BC,SAAO;AACHC,UAAM;AACFC,kBAAY,EADV;AAEFC,iBAAW,EAFT;AAGFC,aAAO,EAHL;AAIFC,aAAO;AAJL,KADH;AAOHC,aAAS;AAPN,GADmB;AAU1BC,WAAS,CAACV,sBAAD,CAViB;AAW1BW,aAAW;AACPP,QADO,gBACFD,KADE,EACKS,IADL,EACW;AACdT,YAAMC,IAAN,GAAaQ,IAAb;AACH,KAHM;AAIPC,aAJO,qBAIGV,KAJH,EAIU;AACbA,YAAMC,IAAN,GAAa;AACTC,oBAAY,EADH;AAETC,mBAAW,EAFF;AAGTC,eAAO,EAHE;AAITC,eAAO;AAJE,OAAb;AAMH,KAXM;AAYPC,WAZO,mBAYCN,KAZD,EAYQS,IAZR,EAYc;AACjBT,YAAMM,OAAN,GAAgBG,IAAhB;AACH;AAdM,GAXe;AA2B1BE,WAAS;AACLC,WADK,yBACeH,IADf,EACqB;AAAA,UAAhBI,MAAgB,QAAhBA,MAAgB;AACtBA,aAAO,MAAP,EAAeJ,IAAf;AACH,KAHI;AAILK,gBAJK,+BAIoB;AAAA,UAAVD,MAAU,SAAVA,MAAU;AACrBA,aAAO,WAAP;AACH,KANI;AAOLE,cAPK,6BAOkBN,IAPlB,EAOwB;AAAA,UAAhBI,MAAgB,SAAhBA,MAAgB;AACzBA,aAAO,SAAP,EAAkBJ,IAAlB;AACH;AATI,GA3BiB;AAsC1BO,WAAS;AACLf,UAAM;AAAA,aAASD,MAAMC,IAAf;AAAA,KADD;AAELK,aAAS;AAAA,aAASN,MAAMM,OAAf;AAAA;AAFJ;AAtCiB,CAAf,CAAf","sourceRoot":"/Library/WebServer/Documents/chat-app","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport createPersistedState from \"vuex-persistedstate\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    state: {\n        user: {\n            first_name: \"\",\n            last_name: \"\",\n            email: \"\",\n            token: \"\"\n        },\n        loading: false\n    },\n    plugins: [createPersistedState()],\n    mutations: {\n        user(state, data) {\n            state.user = data\n        },\n        emptyUser(state) {\n            state.user = {\n                first_name: \"\",\n                last_name: \"\",\n                email: \"\",\n                token: \"\"\n            }\n        },\n        loading(state, data) {\n            state.loading = data;\n        }\n    },\n    actions: {\n        setUser({ commit }, data) {\n            commit(\"user\", data)\n        },\n        setEmptyUser({ commit }) {\n            commit(\"emptyUser\")\n        },\n        setLoading({ commit }, data) {\n            commit(\"loading\", data);\n        }\n    },\n    getters: {\n        user: state => state.user,\n        loading: state => state.loading\n    }\n})\n\n"]}]}