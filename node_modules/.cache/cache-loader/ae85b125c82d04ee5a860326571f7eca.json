{"remainingRequest":"/Library/WebServer/Documents/chat-app/node_modules/babel-loader/lib/index.js!/Library/WebServer/Documents/chat-app/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Library/WebServer/Documents/chat-app/src/components/chat.vue","dependencies":[{"path":"/Library/WebServer/Documents/chat-app/src/components/chat.vue","mtime":1555685905000},{"path":"/Library/WebServer/Documents/chat-app/package.json","mtime":1555681580000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/cache-loader/dist/cjs.js","mtime":1525787659000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Library/WebServer/Documents/chat-app/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"/Library/WebServer/Documents/chat-app/node_modules/@babel/runtime/helpers/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport commonController from \"@/controllers/commonController\";\nimport { mapActions, mapGetters } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      name: \"\",\n      room: \"\",\n      chatMessage: \"\",\n      messages: [],\n      loadingButton: false\n    };\n  },\n  sockets: {\n    connect: function connect() {\n      // Fired when the socket connects.\n      this.isConnected = true;\n      console.log(\"connected\");\n    },\n    disconnect: function disconnect() {\n      this.isConnected = false;\n      console.log(\"disconnected\");\n    },\n    // Fired when the server sends something on the \"msg of questions room\".\n    msg: function msg(data) {\n      console.log(\"receiving data from questions\");\n      var number_of_records = data;\n      console.log(data);\n      this.messages.push(data);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var self = this;\n    console.log(\"local\", localStorage.getItem(\"name\"));\n\n    if (localStorage.getItem(\"name\") === null || localStorage.getItem(\"room\") == null || localStorage.getItem(\"roomId\") == null) {\n      this.$router.push(\"/\");\n    }\n\n    this.name = localStorage.getItem(\"name\");\n    this.room = localStorage.getItem(\"room\"); // set loading to true\n\n    this.setLoading(true);\n    commonController.getMessages(localStorage.getItem(\"room\")).then(function (response) {\n      _this.messages = response.data.payload; // set loading to false\n\n      _this.setLoading(false); // scroll to bottom\n\n\n      setTimeout(function () {\n        self.scrollToBottom();\n      }, 400);\n    }).catch(function (e) {\n      _this.errors.push(e);\n    });\n  },\n  methods: _objectSpread({\n    sendChat: function sendChat() {\n      var _this2 = this;\n\n      var self = this; // Send the \"pingServer\" event to the server.\n\n      var obj = {\n        sender: this.name,\n        room: this.room,\n        message: this.chatMessage\n      };\n\n      loadingButton: true;\n\n      commonController.sendMessage(obj).then(function (response) {\n        //this.messages=response.data.payload\n        loadingButton: false;\n\n        _this2.chatMessage = \"\"; // scroll to bottom\n\n        setTimeout(function () {\n          self.scrollToBottom();\n        }, 400);\n      }).catch(function (e) {\n        loadingButton: false;\n\n        console.log(e);\n      });\n    },\n    activateButton: function activateButton() {\n      if (this.chatMessage.length > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    adminLogin: function adminLogin() {\n      this.$router.push(\"/login\");\n    },\n    // get container height and scroll to bottom\n    scrollToBottom: function scrollToBottom() {\n      var container = document.getElementById(\"chat\");\n      var content = document.getElementById(\"scroll\");\n      if (!container || !content) return;\n      container.scrollTop = container.scrollHeight + parseInt(200);\n      content.scrollTop = content.scrollHeight + parseInt(200);\n    }\n  }, mapActions({\n    setLoading: \"setLoading\"\n  })),\n  computed: _objectSpread({}, mapGetters({\n    loading: \"loading\"\n  }))\n};",{"version":3,"sources":["chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AAEA;wBAEA;;YAEA;YACA;mBACA;gBACA;qBACA,AACA;AANA;AAOA;;gCAEA;AACA;yBACA;kBACA;AAEA;sCACA;yBACA;kBACA;AAEA;AACA;4BACA;kBACA;8BACA;kBACA;yBACA;AACA,AACA;AAnBA;;AAoBA;;eAEA;8CAEA;;AACA,yCACA,wCACA,0CACA,MACA;wBACA;AACA;;qCACA;qCAEA,SACA;;oBAEA;AACA,sDACA;qCAGA,SACA;;uBAEA,OALA,CAMA;;;6BACA;aACA;SACA;AACA,0BACA;wBACA;AACA;AACA;AACA;;AACA;;iBAEA,MACA;;;qBAEA;mBACA;sBACA,AACA;AAJA;;qBAKA;;AACA,mCACA;AAEA;uBACA;;6BAEA,GAJA,CAKA;;+BACA;eACA;WACA;AACA,4BACA;uBACA;;oBACA;AACA;AAEA;8CACA;uCACA;eACA;AACA;;aACA;AAEA;sCACA;wBACA;AAEA;AACA;8CACA;8CACA;4CACA;kCAEA;8DACA;0DACA;AAEA;;gBAEA,AACA,AACA;AAHA;AAIA;aAEA,AACA,AACA;AAHA;AAxHA","file":"chat.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div style=\"text-align: center;\n    margin: 0 auto;\n    width: 60%;\">\n      <div class=\"chat-head\">\n        <h2>Chat Application</h2>\n        <el-button @click=\"adminLogin()\">Admin Login</el-button>\n      </div>\n\n      <div class=\"before-question-container\">\n        <h3 style=\"text-align:left; margin:0;\">Hi {{name}} Welcome to {{room}}</h3>\n        <p style=\"text-align:left;  margin:5px 0;\">Message</p>\n        <div id=\"chat\">\n          <div\n            id=\"scroll\"\n            style=\"min-height: 20px; max-height: 300px; overflow-y: scroll; border: solid thin #ccc;\"\n          >\n            <div class=\"chat-box\" v-for=\"(message, ind) in messages\" :key=\"ind\">\n              <span style=\"font-weight: bold;\">{{message.sender}}</span>\n              :\n              <span style=\"font-style: italic\">{{message.message}}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"chat-sender\">\n          <el-input\n            placeholder=\"Please enter your name\"\n            v-model=\"chatMessage\"\n            @change=\"activateButton()\"\n          ></el-input>\n\n          <el-button\n            class=\"button-without-radius\"\n            :class=\"{'disable-button':activateButton()}\"\n            type=\"primary\"\n            :loading=\"loadingButton\"\n            @click=\"sendChat()\"\n          >Send</el-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport commonController from \"@/controllers/commonController\";\nimport { mapActions, mapGetters } from \"vuex\";\n\nexport default {\n  data() {\n    return {\n      name: \"\",\n      room: \"\",\n      chatMessage: \"\",\n      messages: [],\n      loadingButton: false\n    };\n  },\n  sockets: {\n    connect() {\n      // Fired when the socket connects.\n      this.isConnected = true;\n      console.log(\"connected\");\n    },\n\n    disconnect() {\n      this.isConnected = false;\n      console.log(\"disconnected\");\n    },\n\n    // Fired when the server sends something on the \"msg of questions room\".\n    msg(data) {\n      console.log(\"receiving data from questions\");\n      let number_of_records = data;\n      console.log(data);\n      this.messages.push(data);\n    }\n  },\n  mounted() {\n    let self = this;\n\n    console.log(\"local\", localStorage.getItem(\"name\"));\n\n    if (\n      localStorage.getItem(\"name\") === null ||\n      localStorage.getItem(\"room\") == null ||\n      localStorage.getItem(\"roomId\") == null\n    ) {\n      this.$router.push(\"/\");\n    }\n    this.name = localStorage.getItem(\"name\");\n    this.room = localStorage.getItem(\"room\");\n\n    // set loading to true\n    this.setLoading(true);\n\n    commonController\n      .getMessages(localStorage.getItem(\"room\"))\n      .then(response => {\n        this.messages = response.data.payload;\n\n        // set loading to false\n        this.setLoading(false);\n\n        // scroll to bottom\n        setTimeout(function() {\n          self.scrollToBottom();\n        }, 400);\n      })\n      .catch(e => {\n        this.errors.push(e);\n      });\n  },\n  methods: {\n    sendChat() {\n      let self = this;\n\n      // Send the \"pingServer\" event to the server.\n      let obj = {\n        sender: this.name,\n        room: this.room,\n        message: this.chatMessage\n      };\n      loadingButton: true;\n      commonController\n        .sendMessage(obj)\n        .then(response => {\n          //this.messages=response.data.payload\n          loadingButton: false;\n          this.chatMessage = \"\";\n\n          // scroll to bottom\n          setTimeout(function() {\n            self.scrollToBottom();\n          }, 400);\n        })\n        .catch(e => {\n          loadingButton: false;\n          console.log(e);\n        });\n    },\n\n    activateButton() {\n      if (this.chatMessage.length > 1) {\n        return false;\n      }\n      return true;\n    },\n\n    adminLogin() {\n      this.$router.push(\"/login\");\n    },\n\n    // get container height and scroll to bottom\n    scrollToBottom() {\n      let container = document.getElementById(\"chat\");\n      let content = document.getElementById(\"scroll\");\n      if (!container || !content) return;\n\n      container.scrollTop = container.scrollHeight + parseInt(200);\n      content.scrollTop = content.scrollHeight + parseInt(200);\n    },\n\n    ...mapActions({\n      setLoading: \"setLoading\"\n    })\n  },\n  computed: {\n    ...mapGetters({\n      loading: \"loading\"\n    })\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1 {\n  margin: 10px 0px 40px 0px;\n}\n.chat-head {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: solid medium #20a0ff;\n  padding-bottom: 10px;\n}\n.chat-head h2 {\n  color: #20a0ff;\n  font-weight: bold;\n  padding-top: 10px;\n  margin: 0;\n}\n.chat-box {\n  margin: 5px;\n  padding: 3px;\n  float: left;\n  width: 100%;\n  text-align: left;\n}\n.chat-box ul {\n  list-style-type: none;\n  padding: 0;\n}\n.chat-sender {\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n}\n.chat-sender button {\n  margin-top: 10px;\n  font-weight: bold;\n}\n.image {\n  width: 60%;\n  margin-bottom: 30px;\n}\n\n.chat-box li {\n  background-color: #fff; /* Green */\n  border: #d6d2d2 1px solid;\n  padding: 15px 32px;\n  width: 400px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0 auto;\n  cursor: pointer;\n  border-radius: 25px;\n  margin-bottom: 20px;\n}\n\n.chat-box a {\n  color: #42b983;\n}\n\n.button-container {\n  width: 100%;\n  margin: 0 auto;\n}\n\n.chat-box .button {\n  background-color: #fff; /* Green */\n  border: #d6d2d2 1px solid;\n  padding: 15px 32px;\n  width: 400px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0 auto;\n  cursor: pointer;\n  border-radius: 25px;\n  margin-bottom: 20px;\n}\n\n.button:hover {\n  background: #56c895;\n  color: #fff;\n}\n\n.buttonSelected {\n  background: #56c895;\n  color: #fff;\n}\n\n.bottom-text {\n  position: absolute;\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n}\n\n.disable-button {\n  pointer-events: none;\n}\n\n.el-alert {\n  width: 30%;\n  position: absolute;\n  top: 45%;\n  left: 35%;\n  padding: 11px 18px;\n  border-radius: 25px;\n}\n\n.el-alert__title {\n  font-size: 16px !important;\n  line-height: 18px !important;\n  font-weight: bold !important;\n}\n\n.el-alert__closebtn {\n  font-size: 12px;\n  color: #fff;\n  opacity: 1;\n  top: 15px;\n  right: 15px;\n  position: absolute;\n  cursor: pointer;\n}\n\n@media only screen and (max-width: 768px) {\n  .button {\n    width: 85%;\n  }\n\n  .el-alert {\n    width: 70%;\n    position: absolute;\n    top: 45%;\n    left: 15%;\n  }\n}\n</style>\n"]}]}