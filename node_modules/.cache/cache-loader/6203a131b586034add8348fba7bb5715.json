{"remainingRequest":"/Library/WebServer/Documents/realtime-question/node_modules/babel-loader/lib/index.js!/Library/WebServer/Documents/realtime-question/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Library/WebServer/Documents/realtime-question/src/components/signage.vue","dependencies":[{"path":"/Library/WebServer/Documents/realtime-question/src/components/signage.vue","mtime":1527185965000},{"path":"/Library/WebServer/Documents/realtime-question/package.json","mtime":1525970463000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/cache-loader/dist/cjs.js","mtime":1525787659000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport commonController from \"../controllers/commonController\";\nexport default {\n  name: 'quiz',\n  data: function data() {\n    return {\n      quizId: '',\n      isConnected: false,\n      question_number: 1,\n      isLastQuestion: false,\n      timeout: false,\n      timeToStart: 60,\n      circleProgress: 0,\n      optionsWithAnswer: [],\n      showingQuestion: false,\n      buttonState: [],\n      answer: '',\n      question: {\n        current_question: 'what is the capital of Prince Edward Island ',\n        answers: [\"Charlottetown\", \"Georgetown\", \"Montague\"]\n      }\n    };\n  },\n  sockets: {\n    connect: function connect() {\n      // Fired when the socket connects.\n      this.isConnected = true;\n      console.log('connected');\n      this.joinChannel();\n    },\n    disconnect: function disconnect() {\n      this.isConnected = false;\n      console.log('disconnected');\n    },\n    // Fired when the server sends something on the \"msg of questions room\".\n    msg: function msg(data) {\n      console.log('receiving data from questions');\n      this.question = data.body[0].question[0];\n      this.showingQuestion = true;\n      this.timeout = false;\n      this.selectedAnswer = '';\n      this.buttonState = [];\n      this.startTimer(40);\n      this.circleProgress = 0;\n      this.buttonDisableState = false;\n      this.showException = false;\n      var number_of_records = data.body[0].number_of_records;\n\n      if (this.question_number === number_of_records) {\n        this.isLastQuestion = true;\n      }\n\n      console.log(this.question);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    console.log(this.$route.params.quizId);\n    this.quizId = this.$route.params.quizId;\n    localStorage.setItem('quizId', this.quizId);\n    var timeToStartInterval = setInterval(function () {\n      _this.timeToStart -= 1;\n\n      if (_this.timeToStart <= 0) {\n        _this.pullQuestion();\n\n        clearInterval(timeToStartInterval);\n      }\n    }, 1000);\n  },\n  methods: {\n    pullQuestion: function pullQuestion() {\n      var _this2 = this;\n\n      var obj = {\n        'quiz_id': this.quizId,\n        'page_number': this.question_number,\n        'correct_answer': 1\n      };\n      commonController.getQuestion(obj).then(function (response) {\n        console.log('pulling question', response.data.payload[0].question[0].options);\n        _this2.optionsWithAnswer = response.data.payload[0].question[0].options;\n        _this2.question_number += 1;\n      }).catch(function (e) {\n        console.log('error', e);\n\n        _this2.errors.push(e);\n      });\n    },\n    joinChannel: function joinChannel() {\n      // Send the \"pingServer\" event to the server.\n      console.log(\"joining questions\");\n      this.$socket.emit('join', 'questions');\n    },\n    showExceptionOnDOM: function showExceptionOnDOM() {\n      return this.showException ? \"exception\" : \"success\";\n    },\n    startTimer: function startTimer(timeToExpire) {\n      var _this3 = this;\n\n      var timer = 0;\n      var timerInterval = setInterval(function () {\n        _this3.circleProgress = parseInt(timer / timeToExpire * 100);\n        timer = timer + 1;\n\n        if (_this3.circleProgress > 60) {\n          _this3.showException = true;\n        }\n\n        if (_this3.circleProgress >= 101) {\n          _this3.circleProgress = 100;\n          _this3.timeout = true;\n          clearInterval(timerInterval);\n\n          _this3.showAnswerAndGetAnotherQuestion();\n        }\n      }, 200);\n    },\n    showAnswerAndGetAnotherQuestion: function showAnswerAndGetAnotherQuestion() {\n      var _this4 = this;\n\n      console.log('showing answer');\n      this.optionsWithAnswer.forEach(function (option, index) {\n        if (option.is_correct === 1) _this4.buttonState[index] = true;\n      });\n      setTimeout(function () {\n        console.log('showing answer for 5 sec');\n\n        if (_this4.isLastQuestion === true) {\n          _this4.$router.push('/results');\n        } else {\n          _this4.pullQuestion();\n        }\n      }, 5000);\n    }\n  }\n};",{"version":3,"sources":["signage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAEA;QAEA;wBACA;;cAEA;mBACA;uBACA;sBACA;eACA;mBACA;sBACA;yBACA;uBACA;mBACA;cACA;;0BAEA;iDACA,AACA,AACA;AAJA;AAZA;AAiBA;;gCAEA;AACA;yBACA;kBACA;WAEA;AAEA;sCACA;yBACA;kBAEA;AAEA;AACA;4BACA;kBACA;4CACA;6BACA;qBACA;4BACA;yBACA;sBACA;4BACA;gCACA;2BACA;2CACA;;sDACA;8BACA;AAGA;;uBACA;AACA,AACA;AAnCA;;AAoCA;;mCACA;qCACA;wCAEA;sDACA;2BACA;;kCACA;cACA;;sBACA;AACA;OACA;AACA;;;AAEA;;;wBAEA;4BACA;0BACA,AACA;AAJA;iEAKA;6EACA;wEACA;kCACA;AACA,4BACA;6BACA;;2BAEA;AAEA;AACA;wCACA;AACA;kBACA;gCACA;AACA;sDACA;gDACA;AACA;;AACA;;kBACA;kDACA;gEACA;wBACA;;wCACA;iCACA;AACA;;0CACA;kCACA;2BACA;wBAEA;;iBAEA;AACA;SAGA;AACA;;AACA;;kBACA;8DACA;kCACA,+BACA;AACA;6BACA;oBACA;;4CACA;8BACA;eACA;iBACA;AACA;SAIA;AAGA,AACA;AAnEA;AAtEA","file":"signage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<div style=\"text-align: center\">\n\t\t<div class=\"before-question-container\" v-if=\"!showingQuestion\">\n\t\t\t<h1>Please Go to <span style=\"color:red;\">quiz.dev.unoapp.io</span> <br><br>Use access code <span style=\"color:red;\">unoapp</span>  </h1>\n\t\t\t<div class=\"timer\"><h1>Starting in {{timeToStart}} secs</h1></div>\n\t\t\t<img width=\"60%\" src=\"https://media.boingboing.net/wp-content/uploads/2018/01/mh0MNN39-1.jpg\">\n\t\t</div>\n\t\t<div class=\"question-container\" v-if=\"showingQuestion\">\n\n\t\t\t<el-progress v-if=\"showingQuestion\" type=\"circle\" :percentage=\"circleProgress\"\n\t\t\t\t\t\t :status=\"showExceptionOnDOM()\"></el-progress>\n\t\t\t<h1>{{question.question_text}}</h1>\n\t\t\t<div class=\"button-container\">\n\n\t\t\t\t<div v-for=\" (answer, i) in question.options\" @click=\"setAnswer(answer,i)\" class=\"button\"\n\t\t\t\t\t :class=\"{'buttonSelected':buttonState[i],'disable-button':buttonDisableState}\">\n\t\t\t\t\t{{answer.option_text}}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"bottom-text\">\n\n\t\t\t\t<p>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n</template>\n\n<script>\n\timport commonController from \"../controllers/commonController\";\n\n\texport default {\n\t\tname: 'quiz',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tquizId:'',\n\t\t\t\tisConnected: false,\n\t\t\t\tquestion_number: 1,\n\t\t\t\tisLastQuestion: false,\n\t\t\t\ttimeout: false,\n\t\t\t\ttimeToStart: 60,\n\t\t\t\tcircleProgress: 0,\n\t\t\t\toptionsWithAnswer: [],\n\t\t\t\tshowingQuestion: false,\n\t\t\t\tbuttonState: [],\n\t\t\t\tanswer: '',\n\t\t\t\tquestion: {\n\t\t\t\t\tcurrent_question: 'what is the capital of Prince Edward Island ',\n\t\t\t\t\tanswers: [\"Charlottetown\", \"Georgetown\", \"Montague\"]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsockets: {\n\t\t\tconnect() {\n\t\t\t\t// Fired when the socket connects.\n\t\t\t\tthis.isConnected = true;\n\t\t\t\tconsole.log('connected')\n\t\t\t\tthis.joinChannel()\n\n\t\t\t},\n\n\t\t\tdisconnect() {\n\t\t\t\tthis.isConnected = false;\n\t\t\t\tconsole.log('disconnected')\n\n\t\t\t},\n\n\t\t\t// Fired when the server sends something on the \"msg of questions room\".\n\t\t\tmsg(data) {\n\t\t\t\tconsole.log('receiving data from questions')\n\t\t\t\tthis.question = data.body[0].question[0]\n\t\t\t\tthis.showingQuestion = true\n\t\t\t\tthis.timeout = false\n\t\t\t\tthis.selectedAnswer = ''\n\t\t\t\tthis.buttonState = []\n\t\t\t\tthis.startTimer(40)\n\t\t\t\tthis.circleProgress = 0\n\t\t\t\tthis.buttonDisableState = false\n\t\t\t\tthis.showException = false\n\t\t\t\tlet number_of_records = data.body[0].number_of_records\n\t\t\t\tif (this.question_number === number_of_records) {\n\t\t\t\t\tthis.isLastQuestion = true\n\t\t\t\t}\n\n\n\t\t\t\tconsole.log(this.question)\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\tconsole.log(this.$route.params.quizId)\n\t\t\tthis.quizId=this.$route.params.quizId\n\t\t\tlocalStorage.setItem('quizId', this.quizId);\n\n\t\t\tvar timeToStartInterval = setInterval(() => {\n\t\t\t\tthis.timeToStart -= 1\n\t\t\t\tif (this.timeToStart <= 0) {\n\t\t\t\t\tthis.pullQuestion()\n\t\t\t\t\tclearInterval(timeToStartInterval);\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t},\n\t\tmethods: {\n\t\t\tpullQuestion() {\n\t\t\t\tlet obj = {\n\t\t\t\t\t'quiz_id': this.quizId,\n\t\t\t\t\t'page_number': this.question_number,\n\t\t\t\t\t'correct_answer': 1,\n\t\t\t\t}\n\t\t\t\tcommonController.getQuestion(obj).then(response => {\n\t\t\t\t\t\tconsole.log('pulling question', response.data.payload[0].question[0].options)\n\t\t\t\t\t\tthis.optionsWithAnswer = response.data.payload[0].question[0].options\n\t\t\t\t\t\tthis.question_number += 1\n\t\t\t\t\t}\n\t\t\t\t).catch(e => {\n\t\t\t\t\tconsole.log('error', e)\n\t\t\t\t\tthis.errors.push(e)\n\n\t\t\t\t})\n\n\t\t\t},\n\t\t\tjoinChannel() {\n\t\t\t\t// Send the \"pingServer\" event to the server.\n\t\t\t\tconsole.log(\"joining questions\")\n\t\t\t\tthis.$socket.emit('join', 'questions')\n\t\t\t},\n\t\t\tshowExceptionOnDOM() {\n\t\t\t\treturn this.showException ? \"exception\" : \"success\";\n\t\t\t},\n\t\t\tstartTimer(timeToExpire) {\n\t\t\t\tlet timer = 0\n\t\t\t\tvar timerInterval = setInterval(() => {\n\t\t\t\t\tthis.circleProgress = parseInt((timer / timeToExpire) * 100)\n\t\t\t\t\ttimer = timer + 1\n\t\t\t\t\tif (this.circleProgress > 60) {\n\t\t\t\t\t\tthis.showException = true\n\t\t\t\t\t}\n\t\t\t\t\tif (this.circleProgress >= 101) {\n\t\t\t\t\t\tthis.circleProgress=100\n\t\t\t\t\t\tthis.timeout = true\n\t\t\t\t\t\tclearInterval(timerInterval);\n\n\t\t\t\t\t\tthis.showAnswerAndGetAnotherQuestion()\n\n\t\t\t\t\t}\n\t\t\t\t}, 200);\n\n\n\t\t\t},\n\t\t\tshowAnswerAndGetAnotherQuestion() {\n\t\t\t\tconsole.log('showing answer')\n\t\t\t\tthis.optionsWithAnswer.forEach((option, index) => {\n\t\t\t\t\tif (option.is_correct === 1)\n\t\t\t\t\t\tthis.buttonState[index] = true\n\t\t\t\t})\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log('showing answer for 5 sec')\n\t\t\t\t\tif (this.isLastQuestion === true) {\n\t\t\t\t\t\tthis.$router.push('/results')\n\t\t\t\t\t}else {\n\t\t\t\t\t\tthis.pullQuestion()\n\t\t\t\t\t}\n\t\t\t\t}, 5000)\n\n\n\n\t\t\t}\n\n\n\t\t}\n\t}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\th1 {\n\t\tmargin: 10px 0px 40px 0px;\n\t}\n\n\tul {\n\t\tlist-style-type: none;\n\t\tpadding: 0;\n\t}\n\n\t.buttonSelected {\n\t\tbackground: #56C895;\n\t\tcolor: #fff;\n\n\t}\n\n\ta {\n\t\tcolor: #42b983;\n\t}\n\n\t.button-container {\n\t\twidth: 100%;\n\t\tmargin: 0 auto;\n\t}\n\n\t.button {\n\t\tbackground-color: #fff; /* Green */\n\t\tborder: #d6d2d2 1px solid;\n\t\tpadding: 15px 32px;\n\t\twidth: 400px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tmargin: 0 auto;\n\t\tcursor: pointer;\n\t\tborder-radius: 25px;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.button:hover {\n\t\tbackground: #56C895;\n\t\tcolor: #fff;\n\t}\n\n\t.buttonSelected {\n\t\tbackground: #56C895;\n\t\tcolor: #fff;\n\n\t}\n\n\t.bottom-text {\n\t\tposition: absolute;\n\t\tbottom: 5px;\n\t\twidth: 100%;\n\t\ttext-align: center\n\t}\n\n\t.disable-button {\n\t\tpointer-events: none;\n\t}\n\n\t.el-alert {\n\t\twidth: 30%;\n\t\tposition: absolute;\n\t\ttop: 45%;\n\t\tleft: 35%;\n\t\tpadding: 11px 18px;\n\t\tborder-radius: 25px;\n\n\t}\n\n\t.el-alert__title {\n\t\tfont-size: 16px !important;\n\t\tline-height: 18px !important;\n\t\tfont-weight: bold !important;\n\t}\n\n\t.el-alert__closebtn {\n\t\tfont-size: 12px;\n\t\tcolor: #fff;\n\t\topacity: 1;\n\t\ttop: 15px;\n\t\tright: 15px;\n\t\tposition: absolute;\n\t\tcursor: pointer;\n\t}\n\n\t@media only screen and (max-width: 768px) {\n\t\t.button {\n\t\t\twidth: 85%;\n\t\t}\n\n\t\t.el-alert {\n\t\t\twidth: 70%;\n\t\t\tposition: absolute;\n\t\t\ttop: 45%;\n\t\t\tleft: 15%;\n\t\t}\n\n\t}\n\n</style>\n"]}]}