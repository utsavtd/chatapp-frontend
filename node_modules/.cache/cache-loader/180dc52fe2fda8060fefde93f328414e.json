{"remainingRequest":"/Library/WebServer/Documents/realtime-question/node_modules/babel-loader/lib/index.js!/Library/WebServer/Documents/realtime-question/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Library/WebServer/Documents/realtime-question/src/components/quiz.vue","dependencies":[{"path":"/Library/WebServer/Documents/realtime-question/src/components/quiz.vue","mtime":1526071061000},{"path":"/Library/WebServer/Documents/realtime-question/package.json","mtime":1525970463000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/cache-loader/dist/cjs.js","mtime":1525787659000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Library/WebServer/Documents/realtime-question/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport commonController from '@/controllers/commonController';\nexport default {\n  name: 'quiz',\n  data: function data() {\n    return {\n      isConnected: false,\n      current_quote: 'Maybe if we tell people the brain is an app, they\\'ll start using it.',\n      isLastQuestion: false,\n      question_number: 1,\n      showError: false,\n      errorMessage: '',\n      timeout: false,\n      selectedAnswer: '',\n      userInGame: true,\n      circleProgress: 0,\n      showException: false,\n      showingQuestion: false,\n      socketMessage: '',\n      answerForQuestion: '',\n      buttonState: [],\n      buttonDisableState: false,\n      question: {\n        current_question: 'what is the capital of Prince Edward Island ',\n        answers: [\"Charlottetown\", \"Georgetown\", \"Montague\"]\n      },\n      randomQuotes: ['Do not take life too seriously. You will never get out of it alive.', 'Always remember that you are absolutely unique. Just like everyone else.', 'Happiness is having a large, loving, caring, close-knit family in another city.', 'It takes considerable knowledge just to realize the extent of your own ignorance.', 'We are all here on earth to help others; what on earth the others are here for I don\\'t know.', 'We are all here on earth to help others; what on earth the others are here for I don\\'t know.']\n    };\n  },\n  sockets: {\n    connect: function connect() {\n      // Fired when the socket connects.\n      this.isConnected = true;\n      console.log('connected');\n      this.joinChannel();\n    },\n    disconnect: function disconnect() {\n      this.isConnected = false;\n      console.log('disconnected');\n    },\n    // Fired when the server sends something on the \"msg of questions room\".\n    msg: function msg(data) {\n      console.log('receiving data from questions');\n      var number_of_records = data.body[0].number_of_records;\n      this.question = data.body[0].question[0];\n\n      if (this.question_number === number_of_records) {\n        this.isLastQuestion = true;\n      }\n\n      this.question_number += 1;\n      this.showException = false;\n      this.showError = false;\n      this.showingQuestion = true;\n      this.timeout = false;\n      this.selectedAnswer = '';\n      this.buttonState = [];\n      this.startTimer(40);\n      this.circleProgress = 0;\n      this.buttonDisableState = false;\n      console.log(this.question);\n    }\n  },\n  mounted: function mounted() {\n    console.log('local', localStorage.getItem('participantId'));\n\n    if (localStorage.getItem('participantId') === null || localStorage.getItem('quizId') == null) {\n      this.$router.push('/');\n    }\n\n    this.showQuotes();\n  },\n  methods: {\n    joinChannel: function joinChannel() {\n      // Send the \"pingServer\" event to the server.\n      console.log(\"joining questions\");\n      this.$socket.emit('join', 'questions');\n    },\n    showEliminateMessage: function showEliminateMessage() {\n      console.log(this.userInGame && this.showingQuestion);\n      return this.userInGame && this.showingQuestion;\n    },\n    showExceptionOnDOM: function showExceptionOnDOM() {\n      return this.showException ? \"exception\" : \"success\";\n    },\n    startTimer: function startTimer(timeToExpire) {\n      var _this = this;\n\n      console.log('question', this.question_number);\n      console.log('last question', this.isLastQuestion);\n      var timer = 0;\n      var timerInterval = setInterval(function () {\n        _this.circleProgress = parseInt(timer / timeToExpire * 100);\n        timer = timer + 1;\n\n        if (_this.circleProgress > 60) {\n          _this.showException = true;\n        }\n\n        if (_this.circleProgress >= 99) {\n          _this.timeout = true;\n\n          if (_this.isLastQuestion === true) {\n            setTimeout(function () {\n              console.log('showing answer for 6 sec');\n\n              _this.$router.push('results');\n            }, 6000);\n          }\n\n          clearInterval(timerInterval);\n        }\n      }, 200);\n    },\n    showQuotes: function showQuotes() {\n      var _this2 = this;\n\n      var quoteNo = 0;\n      var showQuotesInterval = setInterval(function () {\n        _this2.current_quote = _this2.randomQuotes[quoteNo];\n        quoteNo += 1;\n\n        if (quoteNo >= _this2.randomQuotes.length) {\n          quoteNo = 0;\n        }\n      }, 4000);\n    },\n    displayError: function displayError(message) {\n      console.log('displaying error');\n      this.errorMessage = message;\n      this.showError = true;\n    },\n    setAnswer: function setAnswer(answer, i) {\n      var _this3 = this;\n\n      console.log(answer);\n\n      if (this.timeout === true) {\n        this.displayError('You were late. Question timed out.');\n        return false;\n      }\n\n      if (this.selectedAnswer != '' && answer != this.selectedAnswer) {\n        this.displayError('You have already selected the answer');\n        return false;\n      } else {\n        this.buttonState[i] = true;\n        this.selectedAnswer = answer;\n        this.buttonDisableState = true;\n        var obj = {\n          'participant_id': localStorage.getItem('participantId'),\n          'quiz_id': localStorage.getItem('quizId'),\n          'question_id': this.question.id,\n          'question_option_id': this.question.options[i].id\n        };\n        console.log(\"answer\", this.question.options[i]);\n        commonController.submitAnswer(obj).then(function (response) {\n          console.log('response for submit answer', response);\n        }).catch(function (e) {\n          console.log('error', e);\n\n          _this3.errors.push(e);\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["quiz.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AAEA;QAEA;wBACA;;mBAEA;qBACA;sBACA;uBACA;iBACA;oBACA;eACA;sBACA;kBACA;sBACA;qBACA;uBACA;qBACA;yBACA;mBACA;0BACA;;0BAEA;iDACA,AACA;AAHA;oBAIA,CACA,uEACA,4EACA,mFACA,qFACA,iGACA,AACA;AA5BA;AA6BA;;gCAEA;AAEA;yBACA;kBACA;WAEA;AAEA;sCACA;yBACA;kBAEA;AAEA;AACA;4BACA;kBACA;2CAEA;4CAEA;;sDACA;8BACA;AAEA;;8BAEA;2BACA;uBACA;6BACA;qBACA;4BACA;yBACA;sBACA;4BACA;gCAGA;uBAEA;AACA,AACA;AA3CA;8BA4CA;8CACA;;kGACA;wBACA;AACA;;SACA;AACA;;wCAEA;AACA;kBACA;gCACA;AACA;0DACA;0CACA;qCACA;AACA;sDACA;gDACA;AACA;;AACA;;mCACA;wCAEA;kBACA;kDACA;+DACA;wBACA;;uCACA;gCACA;AACA;;wCACA;0BACA;;6CACA;mCACA;0BACA;;iCACA;eAEA;AACA;;wBAEA;AACA;SAGA;AACA;;AACA;;oBACA;uDACA;mDACA;mBACA;;mDACA;oBACA;AAEA;SAGA;AAEA;iDACA;kBACA;0BACA;uBAEA;AAEA;;AACA;;kBACA;;iCACA;0BACA;eACA;AACA;;sEACA;0BACA;eACA;AACA,aACA;8BACA;8BACA;kCACA;;iDAEA;0CACA;uCACA;yDACA,AACA;AALA;oDAMA;oEACA;oDACA;AACA,8BACA;+BACA;;6BACA;AAEA;AACA;AAEA,AACA;AA7FA;AApFA","file":"quiz.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<div style=\"text-align: center\">\n\n\t\t<div class=\"before-question-container\" style=\"width: 95%\" v-if=\"!showingQuestion\">\n\t\t\t<h1>Read some great life lessons before quiz starts.\n\t\t\t\t<br><br></h1>\n\n\t\t\t\t<h1 style=\"color: #23A061;\">{{current_quote}}</h1>\n\t\t</div>\n\t\t<div class=\"question-container\" v-if=\"showingQuestion\">\n\n\n\t\t\t<el-progress v-if=\"showingQuestion\" type=\"circle\" :percentage=\"circleProgress\"\n\t\t\t\t\t\t :status=\"showExceptionOnDOM()\"></el-progress>\n\t\t\t<!--<el-radio-group v-model=\"answerForQuestion\">-->\n\t\t\t<!--<ul>-->\n\t\t\t<!--<li v-for=\" answer in question.answers\" >-->\n\t\t\t<!--<el-radio-button  :label=\"answer\">{{answer}}</el-radio-button>-->\n\t\t\t<!--</li>-->\n\t\t\t<!--</ul>-->\n\n\t\t\t<!--</el-radio-group>-->\n\n\t\t\t<h1>{{question.question_text}}</h1>\n\t\t\t<div class=\"button-container\">\n\n\t\t\t\t<div v-for=\" (answer, i) in question.options\" @click=\"setAnswer(answer,i)\" class=\"button\"\n\t\t\t\t\t :class=\"{'buttonSelected':buttonState[i],'disable-button':buttonDisableState}\">\n\t\t\t\t\t{{answer.option_text}}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<el-alert v-if=\"showError\"\n\t\t\t\t\t  :title=\"errorMessage\"\n\t\t\t\t\t  type=\"error\"\n\t\t\t\t\t  show-icon @close=\"showError=false\">\n\t\t\t</el-alert>\n\n\t\t\t<div class=\"powered-by\">\n\t\t\t\t<img src=\"../assets/images/powered.png\" class=\"image\">\n\t\t\t</div>\n\t\t\t<!-- <div class=\"bottom-text\">\n\n\t\t\t\t<p>\n\t\t\t\t\tThis is a random text to explain anything if needed. Click the link which will do nothing.\n\t\t\t\t\t<a href=\"#\" target=\"_blank\">Click me</a>.\n\t\t\t\t</p>\n\t\t\t</div> -->\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport commonController from '@/controllers/commonController'\n\n\texport default {\n\t\tname: 'quiz',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tisConnected: false,\n\t\t\t\tcurrent_quote:'Maybe if we tell people the brain is an app, they\\'ll start using it.',\n\t\t\t\tisLastQuestion: false,\n\t\t\t\tquestion_number: 1,\n\t\t\t\tshowError: false,\n\t\t\t\terrorMessage: '',\n\t\t\t\ttimeout: false,\n\t\t\t\tselectedAnswer: '',\n\t\t\t\tuserInGame: true,\n\t\t\t\tcircleProgress: 0,\n\t\t\t\tshowException: false,\n\t\t\t\tshowingQuestion: false,\n\t\t\t\tsocketMessage: '',\n\t\t\t\tanswerForQuestion: '',\n\t\t\t\tbuttonState: [],\n\t\t\t\tbuttonDisableState: false,\n\t\t\t\tquestion: {\n\t\t\t\t\tcurrent_question: 'what is the capital of Prince Edward Island ',\n\t\t\t\t\tanswers: [\"Charlottetown\", \"Georgetown\", \"Montague\"]\n\t\t\t\t},\n\t\t\t\trandomQuotes:[\n\t\t\t\t\t'Do not take life too seriously. You will never get out of it alive.',\n\t\t\t\t\t'Always remember that you are absolutely unique. Just like everyone else.',\n\t\t\t\t\t'Happiness is having a large, loving, caring, close-knit family in another city.',\n\t\t\t\t\t'It takes considerable knowledge just to realize the extent of your own ignorance.',\n\t\t\t\t\t'We are all here on earth to help others; what on earth the others are here for I don\\'t know.',\n\t\t\t\t\t'We are all here on earth to help others; what on earth the others are here for I don\\'t know.']\n\t\t\t}\n\t\t},\n\t\tsockets: {\n\t\t\tconnect() {\n\t\t\t\t// Fired when the socket connects.\n\n\t\t\t\tthis.isConnected = true;\n\t\t\t\tconsole.log('connected')\n\t\t\t\tthis.joinChannel()\n\n\t\t\t},\n\n\t\t\tdisconnect() {\n\t\t\t\tthis.isConnected = false;\n\t\t\t\tconsole.log('disconnected')\n\n\t\t\t},\n\n\t\t\t// Fired when the server sends something on the \"msg of questions room\".\n\t\t\tmsg(data) {\n\t\t\t\tconsole.log('receiving data from questions')\n\t\t\t\tlet number_of_records = data.body[0].number_of_records\n\n\t\t\t\tthis.question = data.body[0].question[0]\n\n\t\t\t\tif (this.question_number === number_of_records) {\n\t\t\t\t\tthis.isLastQuestion = true\n\t\t\t\t}\n\n\t\t\t\tthis.question_number += 1\n\n\t\t\t\tthis.showException = false\n\t\t\t\tthis.showError = false\n\t\t\t\tthis.showingQuestion = true\n\t\t\t\tthis.timeout = false\n\t\t\t\tthis.selectedAnswer = ''\n\t\t\t\tthis.buttonState = []\n\t\t\t\tthis.startTimer(40)\n\t\t\t\tthis.circleProgress = 0\n\t\t\t\tthis.buttonDisableState = false\n\n\n\t\t\t\tconsole.log(this.question);\n\n\t\t\t}\n\t\t},\n\t\tmounted() {\n\t\t\tconsole.log('local', localStorage.getItem('participantId'))\n\t\t\tif (localStorage.getItem('participantId') === null || localStorage.getItem('quizId')==null) {\n\t\t\t\tthis.$router.push('/')\n\t\t\t}\n\t\t\tthis.showQuotes()\n\t\t},\n\t\tmethods: {\n\t\t\tjoinChannel() {\n\t\t\t\t// Send the \"pingServer\" event to the server.\n\t\t\t\tconsole.log(\"joining questions\")\n\t\t\t\tthis.$socket.emit('join', 'questions')\n\t\t\t},\n\t\t\tshowEliminateMessage() {\n\t\t\t\tconsole.log(this.userInGame && this.showingQuestion)\n\t\t\t\treturn this.userInGame && this.showingQuestion\n\t\t\t},\n\t\t\tshowExceptionOnDOM() {\n\t\t\t\treturn this.showException ? \"exception\" : \"success\";\n\t\t\t},\n\t\t\tstartTimer(timeToExpire) {\n\t\t\t\tconsole.log('question',this.question_number)\n\t\t\t\tconsole.log('last question',this.isLastQuestion)\n\n\t\t\t\tlet timer = 0\n\t\t\t\tvar timerInterval = setInterval(() => {\n\t\t\t\t\tthis.circleProgress = parseInt((timer / timeToExpire) * 100)\n\t\t\t\t\ttimer = timer + 1\n\t\t\t\t\tif (this.circleProgress > 60) {\n\t\t\t\t\t\tthis.showException = true\n\t\t\t\t\t}\n\t\t\t\t\tif (this.circleProgress >= 99) {\n\t\t\t\t\t\tthis.timeout = true\n\t\t\t\t\t\tif (this.isLastQuestion === true) {\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tconsole.log('showing answer for 6 sec')\n\t\t\t\t\t\t\t\tthis.$router.push('results')\n\t\t\t\t\t\t\t}, 6000)\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclearInterval(timerInterval);\n\n\t\t\t\t\t}\n\t\t\t\t}, 200);\n\n\n\t\t\t},\n\t\t\tshowQuotes() {\n\t\t\t\tlet quoteNo=0\n\t\t\t\tvar showQuotesInterval = setInterval(() => {\n\t\t\t\t\tthis.current_quote=this.randomQuotes[quoteNo]\n\t\t\t\t\tquoteNo+=1\n\t\t\t\t\tif(quoteNo >=this.randomQuotes.length){\n\t\t\t\t\t\tquoteNo=0\n\t\t\t\t\t}\n\n\t\t\t\t}, 4000);\n\n\n\t\t\t},\n\n\t\t\tdisplayError(message) {\n\t\t\t\tconsole.log('displaying error')\n\t\t\t\tthis.errorMessage = message\n\t\t\t\tthis.showError = true\n\n\t\t\t},\n\n\t\t\tsetAnswer(answer, i) {\n\t\t\t\tconsole.log(answer)\n\t\t\t\tif (this.timeout === true) {\n\t\t\t\t\tthis.displayError('You were late. Question timed out.')\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif (this.selectedAnswer != '' && answer != this.selectedAnswer) {\n\t\t\t\t\tthis.displayError('You have already selected the answer')\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.buttonState[i] = true\n\t\t\t\t\tthis.selectedAnswer = answer\n\t\t\t\t\tthis.buttonDisableState = true\n\t\t\t\t\tlet obj = {\n\t\t\t\t\t\t'participant_id': localStorage.getItem('participantId'),\n\t\t\t\t\t\t'quiz_id': localStorage.getItem('quizId'),\n\t\t\t\t\t\t'question_id': this.question.id,\n\t\t\t\t\t\t'question_option_id': this.question.options[i].id,\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"answer\", this.question.options[i])\n\t\t\t\t\tcommonController.submitAnswer(obj).then(response => {\n\t\t\t\t\t\t\tconsole.log('response for submit answer', response)\n\t\t\t\t\t\t}\n\t\t\t\t\t).catch(e => {\n\t\t\t\t\t\tconsole.log('error', e)\n\t\t\t\t\t\tthis.errors.push(e)\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\th1 {\n\t\tmargin: 10px 0px 40px 0px;\n\t}\n\n\tul {\n\t\tlist-style-type: none;\n\t\tpadding: 0;\n\t}\n\t.image {\n\t\twidth: 60%;\n\t\tmargin-bottom: 30px;\n\n\t}\n\n\tli {\n\t\tbackground-color: #fff; /* Green */\n\t\tborder: #d6d2d2 1px solid;\n\t\tpadding: 15px 32px;\n\t\twidth: 400px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tmargin: 0 auto;\n\t\tcursor: pointer;\n\t\tborder-radius: 25px;\n\t\tmargin-bottom: 20px;\n\t}\n\n\ta {\n\t\tcolor: #42b983;\n\t}\n\n\t.button-container {\n\t\twidth: 100%;\n\t\tmargin: 0 auto;\n\t}\n\n\t.button {\n\t\tbackground-color: #fff; /* Green */\n\t\tborder: #d6d2d2 1px solid;\n\t\tpadding: 15px 32px;\n\t\twidth: 400px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tmargin: 0 auto;\n\t\tcursor: pointer;\n\t\tborder-radius: 25px;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.button:hover {\n\t\tbackground: #56C895;\n\t\tcolor: #fff;\n\t}\n\n\t.buttonSelected {\n\t\tbackground: #56C895;\n\t\tcolor: #fff;\n\n\t}\n\n\t.bottom-text {\n\t\tposition: absolute;\n\t\tbottom: 5px;\n\t\twidth: 100%;\n\t\ttext-align: center\n\t}\n\n\t.disable-button {\n\t\tpointer-events: none;\n\t}\n\n\t.el-alert {\n\t\twidth: 30%;\n\t\tposition: absolute;\n\t\ttop: 45%;\n\t\tleft: 35%;\n\t\tpadding: 11px 18px;\n\t\tborder-radius: 25px;\n\n\t}\n\n\t.el-alert__title {\n\t\tfont-size: 16px !important;\n\t\tline-height: 18px !important;\n\t\tfont-weight: bold !important;\n\t}\n\n\t.el-alert__closebtn {\n\t\tfont-size: 12px;\n\t\tcolor: #fff;\n\t\topacity: 1;\n\t\ttop: 15px;\n\t\tright: 15px;\n\t\tposition: absolute;\n\t\tcursor: pointer;\n\t}\n\n\t@media only screen and (max-width: 768px) {\n\t\t.button {\n\t\t\twidth: 85%;\n\t\t}\n\n\t\t.el-alert {\n\t\t\twidth: 70%;\n\t\t\tposition: absolute;\n\t\t\ttop: 45%;\n\t\t\tleft: 15%;\n\t\t}\n\n\t}\n\n</style>\n"]}]}